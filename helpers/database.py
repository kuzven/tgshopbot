import os
import logging
from datetime import datetime
from dotenv import load_dotenv
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.future import select
from sqlalchemy.sql import text

logger = logging.getLogger(__name__)

load_dotenv()

DATABASE_URL = os.getenv("DATABASE_URL")

# –°–æ–∑–¥–∞—ë–º –¥–≤–∏–∂–æ–∫ PostgreSQL –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
engine = create_async_engine(DATABASE_URL, future=True, echo=True)

# –°–æ–∑–¥–∞—ë–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
async_session_maker = async_sessionmaker(bind=engine, expire_on_commit=False)

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π
class Base(DeclarativeBase):
    pass

async def save_user(user):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äì –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —Ç–∞–±–ª–∏—Ü—É users_botuser.
    """
    from helpers.models import BotUser

    telegram_id = user.id
    first_name = user.first_name
    last_name = user.last_name if user.last_name else ""
    username = user.username if user.username else ""

    async with async_session_maker() as session:
        result = await session.execute(select(BotUser).where(BotUser.telegram_id == telegram_id))
        existing_user = result.scalar()
        
        if not existing_user:
            new_user = BotUser(
                telegram_id=telegram_id,
                first_name=first_name,
                last_name=last_name,
                username=username,
                created_at=datetime.utcnow()
            )
            session.add(new_user)
            await session.commit()
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {first_name} {last_name} (@{username})")


async def get_questions():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ `Question`, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö `text` (–≤–æ–ø—Ä–æ—Å) –∏ `answer` (–æ—Ç–≤–µ—Ç).
    """
    from helpers.models import Question

    async with async_session_maker() as session:
        result = await session.execute(select(Question))
        questions = result.scalars().all()
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤: {[q.text for q in questions]}")
        return questions
    
async def get_categories(limit=5, offset=0):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã shop_category.
    """
    from helpers.models import Category
    async with async_session_maker() as session:
        result = await session.execute(select(Category).limit(limit).offset(offset))
        return result.scalars().all()

async def get_subcategories(category_id, limit=5, offset=0):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    from helpers.models import SubCategory

    async with async_session_maker() as session:
        result = await session.execute(
            select(SubCategory).where(SubCategory.category_id == category_id).limit(limit).offset(offset)
        )
        return result.scalars().all()

async def get_products(subcategory_id, page=1):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —É—á–µ—Ç–æ–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
    """
    from helpers.models import Product
    from settings.config import PRODUCTS_PER_PAGE

    offset = (page - 1) * PRODUCTS_PER_PAGE

    async with async_session_maker() as session:
        result = await session.execute(
            select(Product)
            .where(Product.subcategory_id == subcategory_id)
            .limit(PRODUCTS_PER_PAGE)
            .offset(offset)
        )
        products = result.scalars().all()

        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {subcategory_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
        return products

async def add_to_cart(user_id, product_id, quantity):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∏—Å–ø–æ–ª—å–∑—É—è `id`, –∞ –Ω–µ `telegram_id`.
    """
    async with async_session_maker() as session:
        logger.info(f"üîç –ü–æ–ª—É—á–∞–µ–º `id` –¥–ª—è `telegram_id={user_id}`.")

        # –ü–æ–ª—É—á–∞–µ–º `id` –ø–æ `telegram_id`
        user_check_query = text("SELECT id FROM users_botuser WHERE telegram_id = :user_id")
        result = await session.execute(user_check_query, {"user_id": user_id})
        user_db_id = result.scalar()

        if not user_db_id:
            logger.error(f"–û—à–∏–±–∫–∞! `telegram_id={user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ `users_botuser`.")
            return  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

        await session.commit()
        session.expire_all()

        logger.info(f"`id={user_db_id}` –Ω–∞–π–¥–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ `shop_cart`.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä –≤ `shop_cart`
        check_cart_query = text("""
        SELECT quantity FROM shop_cart WHERE user_id = :user_db_id AND product_id = :product_id
        """)
        result = await session.execute(check_cart_query, {"user_db_id": user_db_id, "product_id": product_id})
        existing_quantity = result.scalar()

        if existing_quantity:
            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            new_quantity = existing_quantity + quantity
            logger.info(f"–¢–æ–≤–∞—Ä {product_id} —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ {new_quantity}.")

            update_cart_query = text("""
            UPDATE shop_cart SET quantity = :new_quantity WHERE user_id = :user_db_id AND product_id = :product_id
            """)
            await session.execute(update_cart_query, {"new_quantity": new_quantity, "user_db_id": user_db_id, "product_id": product_id})
        else:
            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –µ—â—ë –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            logger.info(f"–¢–æ–≤–∞—Ä {product_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π.")

            insert_cart_query = text("""
            INSERT INTO shop_cart (user_id, product_id, quantity, added_at)
            VALUES (:user_db_id, :product_id, :quantity, NOW())
            """)
            await session.execute(insert_cart_query, {"user_db_id": user_db_id, "product_id": product_id, "quantity": quantity})

        await session.commit()
        logger.info(f"–¢–æ–≤–∞—Ä {product_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `id={user_db_id}`.")
