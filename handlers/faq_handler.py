import logging
from aiogram import Router, types
from helpers.database import get_questions
from helpers.message_manager import delete_previous_message, save_last_message

logger = logging.getLogger(__name__)
router = Router()

@router.callback_query(lambda callback_query: callback_query.data == "faq")
async def faq_handler(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ FAQ.
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –ë–î –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    user_id = callback_query.from_user.id
    logger.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ FAQ –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    await delete_previous_message(callback_query.message.bot, user_id)

    questions = await get_questions()
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –ë–î")

    if not questions:
        logger.warning("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞—è! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–º FAQ.")
        sent_message = await callback_query.message.answer("‚ùó –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤!")
    else:
        faq_text = "‚ùì **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã**:\n\n" + "\n\n".join(
            [f"üìå {q.text}" for q in questions]
        )
        sent_message = await callback_query.message.answer(faq_text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await save_last_message(user_id, sent_message)

    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å FAQ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

@router.inline_query()
async def faq_inline_query(query: types.InlineQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è FAQ.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–ø–æ–ª–Ω—è–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã.
    """
    user_query = query.query.lower()
    questions = await get_questions()

    # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    results = [
        types.InlineQueryResultArticle(
            id=str(q.id),
            title=q.text,
            input_message_content=types.InputTextMessageContent(message_text=f"‚ùì *{q.text}*\n\n{q.answer}"),
            description=q.answer[:50]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –æ—Ç–≤–µ—Ç–∞
        )
        for q in questions if user_query in q.text.lower()
    ]

    await query.answer(results, cache_time=1)
