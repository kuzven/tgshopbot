import logging
from aiogram import Router, types
from aiogram.filters import Command
from helpers.database import get_questions
from helpers.message_manager import delete_previous_message, save_last_message

logger = logging.getLogger(__name__)
router = Router()

@router.callback_query(lambda callback_query: callback_query.data == "faq")
async def faq_handler(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ FAQ.
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –ë–î –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    user_id = callback_query.from_user.id
    logger.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ FAQ –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    await delete_previous_message(callback_query.message.bot, user_id)

    # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é sent_message
    sent_message = None  

    questions = await get_questions()
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –ë–î")

    if not questions:
        logger.warning("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞—è! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–º FAQ.")
        sent_message = await callback_query.message.answer("‚ùó –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤!")
    else:
        faq_text = "‚ùì **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã**:\n\n" + "\n\n".join(
            [f"üìå {q.text}" for q in questions]
        )
        sent_message = await callback_query.message.answer(faq_text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await save_last_message(user_id, sent_message)

    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å FAQ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

@router.inline_query()
async def faq_inline_query(query: types.InlineQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è FAQ.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–ø–æ–ª–Ω—è–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã.
    """
    user_id = query.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å: {query.query} –æ—Ç {query.from_user.id}")

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    await delete_previous_message(query.bot, user_id)

    user_query = query.query.lower().strip()  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    questions = await get_questions()
    logger.info(f"–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –ë–î")

    # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    results = [
        types.InlineQueryResultArticle(
            id=str(q.id),
            title=q.text,
            # input_message_content=types.InputTextMessageContent(message_text=f"‚ùì *{q.text}*\n\n{q.answer}"),
            input_message_content=types.InputTextMessageContent(
                message_text=f"‚ùì *{q.text}*\n\n{q.answer}",
                parse_mode="Markdown"
            ),
            description=q.answer[:50],  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –æ—Ç–≤–µ—Ç–∞
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üîç –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", switch_inline_query_current_chat="")],
                [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
            ])
        )
        for q in questions if user_query in q.text.lower() or q.text.lower().startswith(user_query)
    ]

    await query.answer(results, cache_time=0)

    logger.info(f"–ò–Ω–ª–∞–π–Ω-–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

@router.message(Command("faq"))
async def faq_command_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /faq.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º FAQ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –∫–Ω–æ–ø–∫–∞ "‚ùì FAQ".
    """
    user_id = message.from_user.id

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    await delete_previous_message(message.bot, user_id)

    # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é sent_message
    sent_message = None  

    bot_username = (await message.bot.get_me()).username  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞
    switch_inline_query = f"@{bot_username} "  # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîç –û—Ç–∫—Ä—ã—Ç—å FAQ", switch_inline_query_current_chat="")]
    ])

    sent_message = await message.answer(
        f"üîç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ @{bot_username}, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∏–∑ FAQ.",
        reply_markup=keyboard
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await save_last_message(user_id, sent_message)
