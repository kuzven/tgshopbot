import logging
from aiogram import Router, types
from sqlalchemy.future import select
from sqlalchemy.sql import func
from helpers.database import get_products
from helpers.message_manager import delete_previous_message, delete_all_previous_messages, save_last_message
from helpers.database import async_session_maker
from settings.config import PRODUCTS_PER_PAGE
from helpers.models import Product

logger = logging.getLogger(__name__)
router = Router()

@router.callback_query(lambda callback_query: callback_query.data.startswith("subcategory_") or callback_query.data.startswith("product_page_"))
async def product_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if callback_query.data.startswith("subcategory_"):
        subcategory_id = int(callback_query.data.split("_")[-1])
        page = 1
    else:
        subcategory_id, page = map(int, callback_query.data.split("_")[2:])

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {subcategory_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")

    # –£–¥–∞–ª—è–µ–º –í–°–ï –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_all_previous_messages(callback_query.message.bot, user_id)

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    total_products = await count_products_in_subcategory(subcategory_id)
    logger.info(f"–í –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {subcategory_id} –≤—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    products = await get_products(subcategory_id, page)

    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if not products:
        logger.warning(f"‚ùå –í –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {subcategory_id} –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'.")

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        await delete_previous_message(callback_query.message.bot, user_id)

        # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é sent_message
        sent_message = None

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        main_menu_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
        main_menu_button = types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")

        main_menu_keyboard.inline_keyboard.append([main_menu_button])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        sent_message = await callback_query.message.answer("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", reply_markup=main_menu_keyboard)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await save_last_message(user_id, sent_message)
        
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –æ–¥–Ω–æ–º—É
    for product in products:
        logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä: {product.name}, —Ü–µ–Ω–∞: {product.price}, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {product.image}")

        product_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
        btn = types.InlineKeyboardButton(text=f"üõí –í –∫–æ—Ä–∑–∏–Ω—É ({product.price} ‚ÇΩ)", callback_data=f"add_to_cart_{product.id}")
        product_keyboard.inline_keyboard.append([btn])

        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: {btn.text}")

        sent_message = await callback_query.message.answer_photo(
            photo=product.image,
            caption=f"*{product.name}*\n\n{product.description}\n\n–¶–µ–Ω–∞: {product.price} ‚ÇΩ",
            reply_markup=product_keyboard,
            parse_mode="Markdown"
        )

        await save_last_message(user_id, sent_message)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é "‚û°Ô∏è –í–ø–µ—Ä—ë–¥", –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä—ã
    navigation_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
    
    if page > 1:
        navigation_keyboard.inline_keyboard.append([types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"product_page_{subcategory_id}_{page - 1}")])
    
    next_page_start = page * PRODUCTS_PER_PAGE
    if next_page_start < total_products:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–Ω—É—Ç—Å—è –ª–∏ –µ—â—ë —Ç–æ–≤–∞—Ä—ã!
        navigation_keyboard.inline_keyboard.append([types.InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"product_page_{subcategory_id}_{page + 1}")])

    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = (total_products + PRODUCTS_PER_PAGE - 1) // PRODUCTS_PER_PAGE
    navigation_text = f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {total_products}\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}"

    if navigation_keyboard.inline_keyboard:
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
        sent_message = await callback_query.message.answer(navigation_text, reply_markup=navigation_keyboard)
        await save_last_message(user_id, sent_message)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é

    logger.info(f"–í—Å–µ —Ç–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

async def count_products_in_subcategory(subcategory_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    from helpers.database import async_session_maker
    async with async_session_maker() as session:
        result = await session.execute(
            select(func.count()).select_from(Product).where(Product.subcategory_id == subcategory_id)
        )
        return result.scalar()
