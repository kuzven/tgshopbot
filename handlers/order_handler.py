from aiogram import Router, types
import logging
from helpers.database import async_session_maker
from helpers.message_manager import delete_previous_message, delete_all_previous_messages
from sqlalchemy.sql import text

router = Router()
logger = logging.getLogger(__name__)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –∑–∞–∫–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
order_sessions = {}

@router.callback_query(lambda callback_query: callback_query.data == "checkout")
async def ask_delivery_info_handler(callback_query: types.CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞.
    """
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{user_id}` –Ω–∞—á–∞–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞!")

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏
    await delete_previous_message(callback_query.message.bot, user_id)

    sent_message = await callback_query.message.answer("–í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–∞–¥—Ä–µ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –¥—Ä.) üëá")

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    order_sessions[user_id] = {"message_id": sent_message.message_id}
    logger.info(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω ID —Å–æ–æ–±—â–µ–Ω–∏—è `{sent_message.message_id}` –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{user_id}`.")

@router.message(lambda message: message.from_user.id in order_sessions)
async def confirm_order_handler(message: types.Message):
    """
    –°–æ–∑–¥–∞—ë—Ç –∑–∞–∫–∞–∑ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    user_id = message.from_user.id
    delivery_info = message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç `{user_id}`: {delivery_info}")

    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º `id` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_query = text("SELECT id FROM users_botuser WHERE telegram_id = :user_id")
        result = await session.execute(user_query, {"user_id": user_id})
        user_db_id = result.scalar()

        if not user_db_id:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞! `telegram_id={user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ `users_botuser`.")
            await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
        create_order_query = text("""
        INSERT INTO shop_order (user_id, created_at, delivery_info)
        VALUES (:user_db_id, NOW(), :delivery_info)
        RETURNING id
        """)
        result = await session.execute(create_order_query, {"user_db_id": user_db_id, "delivery_info": delivery_info})
        order_id = result.scalar()
        await session.commit()

        logger.info(f"‚úÖ –ó–∞–∫–∞–∑ `{order_id}` —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{user_id}`.")

        # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑
        cart_query = text("SELECT product_id, quantity FROM shop_cart WHERE user_id = :user_db_id")
        result = await session.execute(cart_query, {"user_db_id": user_db_id})
        cart_items = result.fetchall()

        for product_id, quantity in cart_items:
            add_order_item_query = text("""
            INSERT INTO shop_orderitem (order_id, product_id, quantity)
            VALUES (:order_id, :product_id, :quantity)
            """)
            await session.execute(add_order_item_query, {"order_id": order_id, "product_id": product_id, "quantity": quantity})

        await session.commit()
        logger.info(f"–í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∑–∞–∫–∞–∑ `{order_id}`.")

        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await session.execute(text("DELETE FROM shop_cart WHERE user_id = :user_db_id"), {"user_db_id": user_db_id})
        await session.commit()
        logger.info(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{user_id}` —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏
    await delete_previous_message(message.bot, user_id)
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{user_id}` —É–¥–∞–ª–µ–Ω–æ.")

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    menu_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
    ])

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    sent_message = await message.answer("‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–π –¥–æ—Å—Ç–∞–≤–∫—É!", reply_markup=menu_keyboard)
    logger.info(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω ID —Å–æ–æ–±—â–µ–Ω–∏—è `{sent_message.message_id}` –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{user_id}`.")

    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ `order_sessions`
    del order_sessions[user_id]
    logger.info(f"`order_sessions[{user_id}]` –î–∞–Ω–Ω—ã–µ `order_sessions` —É–¥–∞–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
