import logging
from aiogram import Router, types
from helpers.database import get_subcategories
from helpers.message_manager import delete_previous_message, save_last_message
from settings.config import SUBCATEGORIES_PER_PAGE

logger = logging.getLogger(__name__)
router = Router()

@router.callback_query(lambda callback_query: callback_query.data.startswith("category_"))
async def subcategory_handler(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    user_id = callback_query.from_user.id
    category_id = int(callback_query.data.split("_")[-1])
    logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}")

    await delete_previous_message(callback_query.message.bot, user_id)

    page = 1
    offset = (page - 1) * SUBCATEGORIES_PER_PAGE
    subcategories = await get_subcategories(category_id, limit=SUBCATEGORIES_PER_PAGE, offset=offset)

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=sub.name, callback_data=f"subcategory_{sub.id}")]
        for sub in subcategories
    ])

    navigation_buttons = []
    if len(subcategories) == SUBCATEGORIES_PER_PAGE:
        navigation_buttons.append(types.InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"subcategory_page_{category_id}_{page + 1}"))

    if navigation_buttons:
        keyboard.inline_keyboard.append(navigation_buttons)

    sent_message = await callback_query.message.answer(f"–í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é üëá", reply_markup=keyboard)
    await save_last_message(user_id, sent_message)

    logger.info(f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

@router.callback_query(lambda callback_query: callback_query.data.startswith("subcategory_page_"))
async def subcategory_pagination_handler(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    """
    user_id = callback_query.from_user.id
    category_id, page = map(int, callback_query.data.split("_")[2:])  # –ü–æ–ª—É—á–∞–µ–º `category_id` –∏ `page`
    logger.info(f"–ö–ª–∏–∫ –ø–æ '‚û°Ô∏è –í–ø–µ—Ä—ë–¥'! –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")

    await delete_previous_message(callback_query.message.bot, user_id)

    offset = (page - 1) * SUBCATEGORIES_PER_PAGE
    subcategories = await get_subcategories(category_id, limit=SUBCATEGORIES_PER_PAGE, offset=offset)

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=sub.name, callback_data=f"subcategory_{sub.id}")]
        for sub in subcategories
    ])

    navigation_buttons = []
    if page > 1:
        navigation_buttons.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"subcategory_page_{category_id}_{page - 1}"))
    if len(subcategories) == SUBCATEGORIES_PER_PAGE:
        navigation_buttons.append(types.InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"subcategory_page_{category_id}_{page + 1}"))

    if navigation_buttons:
        keyboard.inline_keyboard.append(navigation_buttons)

    sent_message = await callback_query.message.answer(f"–í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é üëá", reply_markup=keyboard)
    await save_last_message(user_id, sent_message)

    logger.info(f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
