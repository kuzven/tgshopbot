import logging
from aiogram import Router, types
from helpers.database import get_subcategories
from helpers.message_manager import delete_previous_message, save_last_message
from settings.config import SUBCATEGORIES_PER_PAGE

logger = logging.getLogger(__name__)
router = Router()

@router.callback_query(lambda callback_query: callback_query.data.startswith("category_") or callback_query.data.startswith("subcategory_page_"))
async def subcategory_handler(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    """
    user_id = callback_query.from_user.id

    if callback_query.data.startswith("category_"):
        category_id = int(callback_query.data.split("_")[-1])
        page = 1  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    else:
        category_id, page = map(int, callback_query.data.split("_")[2:])  # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

    logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")

    await delete_previous_message(callback_query.message.bot, user_id)

    offset = (page - 1) * SUBCATEGORIES_PER_PAGE
    subcategories = await get_subcategories(category_id, limit=SUBCATEGORIES_PER_PAGE, offset=offset)

    if not subcategories:
        logger.warning(f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id} –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'.")

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        await delete_previous_message(callback_query.message.bot, user_id)

        # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é sent_message
        sent_message = None

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        main_menu_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
        main_menu_button = types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
        main_menu_keyboard.inline_keyboard.append([main_menu_button])

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        sent_message = await callback_query.message.answer("‚ùå –ù–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", reply_markup=main_menu_keyboard)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await save_last_message(user_id, sent_message)

        return

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=sub.name, callback_data=f"subcategory_{sub.id}")]
        for sub in subcategories
    ])

    navigation_buttons = []
    if page > 1:
        navigation_buttons.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"subcategory_page_{category_id}_{page - 1}"))
    if len(subcategories) == SUBCATEGORIES_PER_PAGE:
        navigation_buttons.append(types.InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"subcategory_page_{category_id}_{page + 1}"))

    if navigation_buttons:
        keyboard.inline_keyboard.append(navigation_buttons)

    sent_message = await callback_query.message.answer(f"–í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é üëá", reply_markup=keyboard)
    await save_last_message(user_id, sent_message)

    logger.info(f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
