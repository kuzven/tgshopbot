import logging
from aiogram import Router, types
from sqlalchemy.sql import text
from helpers.database import add_to_cart, async_session_maker
from helpers.message_manager import delete_previous_message, save_last_message, delete_all_previous_messages

logger = logging.getLogger(__name__)
router = Router()

# –°–æ–∑–¥–∞—ë–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–æ–≤–∞—Ä–∞–º–∏
user_messages = {}

# –û–±—ä—è–≤–ª—è–µ–º `cart_sessions` –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
cart_sessions = {}

@router.callback_query(lambda callback_query: callback_query.data.startswith("add_to_cart_"))
async def ask_quantity_handler(callback_query: types.CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É.
    """
    user_id = callback_query.from_user.id
    product_id = int(callback_query.data.split("_")[-1])
    product_name = callback_query.message.caption.split("\n")[0]

    logger.info(f"üõí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ç–æ–≤–∞—Ä {product_id}, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")

    # –£–¥–∞–ª—è–µ–º –í–°–ï –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    await delete_all_previous_messages(callback_query.message.bot, user_id)

    # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é sent_message
    sent_message = None  

    sent_message = await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤:")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await save_last_message(user_id, sent_message)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º product_id –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    cart_sessions[user_id] = {"product_id": product_id, "product_name": product_name}

@router.message(lambda message: message.text.isdigit() and message.from_user.id in cart_sessions)
async def confirm_cart_handler(message: types.Message):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.
    """
    user_id = message.from_user.id
    quantity = int(message.text)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    await delete_previous_message(message.bot, user_id)

    # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é sent_message
    sent_message = None  

    if quantity <= 0:
        sent_message = await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞:")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await save_last_message(user_id, sent_message)

        return

    product_name = cart_sessions[user_id]["product_name"]
    cart_sessions[user_id]["quantity"] = quantity

    confirm_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_cart")],
        [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
    ])

    sent_message = await message.answer(f"–¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É {quantity} —à—Ç. —Ç–æ–≤–∞—Ä–∞ {product_name}?", reply_markup=confirm_keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await save_last_message(user_id, sent_message)


@router.callback_query(lambda callback_query: callback_query.data == "confirm_cart")
async def add_cart_handler(callback_query: types.CallbackQuery):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    user_id = callback_query.from_user.id

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    await delete_previous_message(callback_query.message.bot, user_id)

    # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é sent_message
    sent_message = None  

    if user_id not in cart_sessions:
        sent_message = await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞! –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await save_last_message(user_id, sent_message)

        return

    product_id = cart_sessions[user_id]["product_id"]
    product_name = cart_sessions[user_id]["product_name"]
    quantity = cart_sessions[user_id]["quantity"]

    await add_to_cart(user_id, product_id, quantity)

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    cart_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="view_cart")],
        [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
    ])

    sent_message = await callback_query.message.answer(
        f"‚úÖ {quantity} —à—Ç. —Ç–æ–≤–∞—Ä–∞ {product_name} –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω—É!", reply_markup=cart_keyboard
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await save_last_message(user_id, sent_message)

    # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    del cart_sessions[user_id]

@router.callback_query(lambda callback_query: callback_query.data == "view_cart")
async def view_cart_handler(callback_query: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤.
    """
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—É—á–∞–µ–º `id` –¥–ª—è `telegram_id={user_id}`.")

    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º `id` –ø–æ `telegram_id`
        user_check_query = text("SELECT id FROM users_botuser WHERE telegram_id = :user_id")
        result = await session.execute(user_check_query, {"user_id": user_id})
        user_db_id = result.scalar()

        if not user_db_id:
            logger.warning(f"‚ö† –û—à–∏–±–∫–∞! `telegram_id={user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ `users_botuser`.")
            await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await session.commit()
        session.expire_all()

        logger.info(f"`id={user_db_id}` –Ω–∞–π–¥–µ–Ω! –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É...")

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ `shop_cart` –ø–æ `id`
        cart_query = text("""
        SELECT shop_product.id, shop_product.name, shop_product.price, shop_product.image, shop_cart.quantity
        FROM shop_cart
        JOIN shop_product ON shop_cart.product_id = shop_product.id
        WHERE shop_cart.user_id = :user_db_id
        """)
        result = await session.execute(cart_query, {"user_db_id": user_db_id})
        cart_items = result.fetchall()

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ: {len(cart_items)}")

    if not cart_items:
        logger.warning(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `id={user_db_id}`!")
        await callback_query.message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return

    # –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    for item in cart_items:
        product_id, product_name, price, image_url, quantity = item
        logger.info(f"–¢–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ: {product_name}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}")

        cart_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"remove_{product_id}")],
            [types.InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data=f"update_{product_id}")]
        ])

        await callback_query.message.answer_photo(
            photo=image_url,
            caption=f"**{product_name}**\n–¶–µ–Ω–∞: {price} ‚ÇΩ\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.",
            reply_markup=cart_keyboard,
            parse_mode="Markdown"
        )

@router.callback_query(lambda callback_query: callback_query.data.startswith("remove_"))
async def remove_from_cart_handler(callback_query: types.CallbackQuery):
    """
    –£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    """
    user_id = callback_query.from_user.id
    product_id = int(callback_query.data.split("_")[-1])

    async with async_session_maker() as session:
        remove_query = text("DELETE FROM shop_cart WHERE user_id = :user_id AND product_id = :product_id")
        await session.execute(remove_query, {"user_id": user_id, "product_id": product_id})
        await session.commit()

    await callback_query.message.answer(f"‚ùå –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    await view_cart_handler(callback_query)

@router.callback_query(lambda callback_query: callback_query.data.startswith("update_"))
async def update_quantity_handler(callback_query: types.CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ.
    """
    user_id = callback_query.from_user.id
    product_id = int(callback_query.data.split("_")[-1])

    sent_message = await callback_query.message.answer("‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    await save_last_message(user_id, sent_message)

    cart_sessions[user_id] = {"product_id": product_id}

@router.message(lambda message: message.text.isdigit() and message.from_user.id in cart_sessions)
async def confirm_update_handler(message: types.Message):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ.
    """
    user_id = message.from_user.id
    quantity = int(message.text)

    if quantity <= 0:
        sent_message = await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        await save_last_message(user_id, sent_message)
        return

    product_id = cart_sessions[user_id]["product_id"]

    async with async_session_maker() as session:
        update_query = text("""
        UPDATE shop_cart SET quantity = :quantity WHERE user_id = :user_id AND product_id = :product_id
        """)
        await session.execute(update_query, {"quantity": quantity, "user_id": user_id, "product_id": product_id})
        await session.commit()

    await message.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {quantity} —à—Ç.")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await view_cart_handler(types.CallbackQuery(from_user=message.from_user, message=message))
